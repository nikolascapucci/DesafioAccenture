{
	"info": {
		"_postman_id": "97cb082e-e957-4360-bde8-5ca0a27b94e6",
		"name": "Desafio Accenture - API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46410378"
	},
	"item": [
		{
			"name": "1. Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar se a requisição foi bem-sucedida (Status 201 Created)\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Extrair e salvar dados da resposta para os próximos passos\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"userID\", response.userID);\r",
							"\r",
							"// Salvar o usuário e senha que foram enviados no corpo da requisição\r",
							"const requestBody = JSON.parse(pm.request.body.raw);\r",
							"pm.environment.set(\"username\", requestBody.userName);\r",
							"pm.environment.set(\"password\", requestBody.password);\r",
							"\r",
							"console.log(\"Usuário criado com sucesso! UserID:\", response.userID);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"testuser_{{$randomInt}}\",\r\n  \"password\": \"Password@123!\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Account/v1/User",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Generate Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar se a requisição foi bem-sucedida (Status 200 OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Token foi gerado com sucesso\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.token).to.not.be.empty;\r",
							"    \r",
							"    // Salvar o token no ambiente\r",
							"    pm.environment.set(\"token\", response.token);\r",
							"    console.log(\"Token gerado:\", response.token);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Account/v1/GenerateToken",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Authorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar o status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validar se a resposta é 'true'\r",
							"pm.test(\"Response body is true\", function () {\r",
							"    // CORREÇÃO: A forma correta de verificar um corpo de resposta de texto simples\r",
							"    pm.response.to.have.body('true');\r",
							"    console.log(\"Usuário está autorizado.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Account/v1/Authorized",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"Authorized"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. List Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Lista de livros foi recebida\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.books).to.be.an('array').with.length.above(0);\r",
							"\r",
							"    // Salvar o ISBN dos dois primeiros livros\r",
							"    const firstBookIsbn = response.books[0].isbn;\r",
							"    const secondBookIsbn = response.books[1].isbn;\r",
							"\r",
							"    pm.environment.set(\"isbn1\", firstBookIsbn);\r",
							"    pm.environment.set(\"isbn2\", secondBookIsbn);\r",
							"\r",
							"    console.log(\"ISBN do Livro 1:\", firstBookIsbn);\r",
							"    console.log(\"ISBN do Livro 2:\", secondBookIsbn);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Rent Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    console.log(\"Livros adicionados à coleção com sucesso!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{userID}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{isbn1}}\"\r\n    },\r\n    {\r\n      \"isbn\": \"{{isbn2}}\"\r\n    }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Get User Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Detalhes do usuário contêm os livros alugados\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const rentedBooksIsbn = response.books.map(book => book.isbn); // Cria um array apenas com os ISBNs\r",
							"\r",
							"    pm.expect(response.userId).to.eql(pm.environment.get(\"userID\"));\r",
							"    pm.expect(rentedBooksIsbn).to.include(pm.environment.get(\"isbn1\"));\r",
							"    pm.expect(rentedBooksIsbn).to.include(pm.environment.get(\"isbn2\"));\r",
							"\r",
							"    console.log(\"Validação finalizada: O usuário possui os livros corretos em sua coleção.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/Account/v1/User/{{userID}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		}
	]
}